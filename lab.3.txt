1.write a c programme to print preorder,inorder and postorder traversal on binary tree.

#include <stdio.h>
#include <stdlib.h>

struct node{

    int data;
    struct node* left;
    struct node* right;
};

void inorder(struct node*root){
    if(root==NULL)return;
    inorder(root->left);
    printf("%d-",root->data);
    inorder(root->right);
}

void preorder(struct node*root){
    if(root==NULL)return;
    printf("%d-",root->data);
    preorder(root->left);
    preorder(root->right);
}

void postorder(struct node*root){
    if(root==NULL)return;
    postorder(root->left);
    postorder(root->right);
    printf("%d-",root->data);
   
}
struct node*createNode(int valve)
{
    struct node*newNode=malloc(sizeof(struct node));
    newNode->data=valve;
    newNode->left=NULL;
    newNode->right=NULL;
 
    return newNode;
   
}

void main()
{
    struct node*root=createNode(5);
    root->left=createNode(10);
    root->right=createNode(9);
   
    root->left->left=createNode(13);
    root->left->right=createNode(17);
   
   
    printf("Inorder traversal\n");
    inorder(root);
   
   
    printf("\nPreorder traversal\n");
    preorder(root);
   
   
    printf("\nPostorder traversal\n");
    postorder(root);
   
   
}
output:
13-10-17-5-9
Inorder traversal
5-10-13-17-9-
pre order traversal
13-17-10-9-5-
post order


2.write a c programme to create or insert inorder traversal on binary search tree.


#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node*left;
    struct node*right;
   
};

struct node*newNode(int item)
{
    struct node*temp=(struct node*)malloc(sizeof(struct node));
    temp->data=item;
    temp->left=temp->right=NULL;
    return temp;
   
}


struct node*insert(struct node *node,int valve)
{
 if(node==NULL)return newNode(valve);
    if (valve<node->data)
      node->left=insert(node->left,valve);
    else if (valve>node->data)
      node->right=insert(node->right,valve);
    return node;  
}


void inorder(struct node* root){
    if(root==NULL)return;
    inorder(root->left);
    printf("%d->",root->data);
    inorder(root->right);
}    



void main()
{
    struct node*root=NULL;
    root=insert(root,50);
    insert(root,33);
    insert(root,40);
    insert(root,25);
    insert(root,70);
    insert(root,99);
    insert(root,80);
  printf("\ninorder traversal\n");    
   inorder(root);
   
   
   
   
}

out put:
25->33->42->50->70->80->99->

3.write a c programme for linear search algorithm.
#include <stdio.h>
void main()
{
 
int arr[60],x,i,n;
printf("enter the no of elements in array\n");
scanf("%d",&n);
printf("enter the integers\n");
for(i=0;i<n;i++)
   scanf("%d",&arr[i]);
printf("enter the element to search");
scanf("%d",&x);
     for(i=0;i<n;i++)
    {
       if (array[i]==x-1)
        {
          printf(%d is at location%d\n",x,i+1);
             break;
     }
}
 if(i==n)
    printf("%d is not present at array\n",x);
  return 0;
}
    

output:
element the no of elements in an array 6
enter integers
34
56
78
90
12
55
enter the number to be search 56
56 is at location 1

  
4.write a c programme for binary search algorithm.


#include <stdio.h>
int main()
{
    intx,y,first,last,middle,n,valve,swap,arr[100];
    printf("enter number of elements\n");
    scanf("%d",&n);
    printf("enter the elements:");
    for(x=0;x<100; x++){
           scanf("%d",&arr[i]);
    }
    
    printf("enter the valve to be serached:");
    scanf("%d",&valve);
    last=0;
        =n-1 
   for (x=0,x<n,x++){
    for(y=0;y<n-x-1;y++1){
      if(arr[y]>arr[y+1]){
        swap=arr[y];
         arr[y]=arr[y+1]{
         arr[y+1]=swap;
       }
     }
}    while(first<=last){
         middle=(first+last)/2;
         if(arr[middle]<valve){
            first=last+1;
         }else if(arr[middle]==valve){
             printf("%d is found at location %d",valve,middle+1);
             break;
         }else{
             last=middle-1;
         }
       }if(first>last){
         printf("Not found");
       }
       return 0; 
    

output:
enter number of elemens:5

enter 4 integers
37
59
64
91
55
91 is found at location 4


