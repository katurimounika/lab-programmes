1.Write a C programme to reverse a string using stack

#include<stdio.h>
#include<string.h>
char string[30];
char stack[40];
int top;
void push(char item);
void pop();
int main(){
    int x,p;
    printf("enter the string:");
    scanf("%s",string);
    p=strlen(string);
    for(x=0;x<=p;x++){
        push(string[x]);
    }
    for(x=0;x<=p;x++){
        pop();
    }
    
}
void push(char item){
    if(top==39){
        printf("stack is full");
    }
    else{
        top++;
        stack[top]=item;
    }
}
void pop(){
    if(top==-1){
        printf("Stack is empty");
    }
    else{
        top--;
        printf("%c",stack[top]);
    }
}


Output:
enter the string:vineela
aleeniv

2.write a c programme for infix to postfix conversion using stack.
#include <stdio.h>
#include <ctype.h>
#define SIZE 50            

char stack[SIZE];
int top=-1;       
 
push(char elements)
{                       
    stack[++top]=elements;
}
 
char pop()
{                      
    return(stack[top--]);
}
 
int pr(char symbol)
{                 
    
	if(symbol == '^')
	{
		return(3);
	}
	else if(symbol == '*' || symbol == '/')
	{
		return(2);
	}
	else if(symbol == '+' || symbol == '-')          
	{
		return(1);
	}
	else
	{
		return(0);
	}
}

void main()
{                        
    char infix[100],postfix[100],ch,elements;
    int j=0,L=0;
    printf("Enter the Infix Expression of your choice : ");
    scanf("%s",infix);
    push('#');
    while( (ch=infix[j++]) != '\0')
    {
        if( ch == '(') push(ch);
        else
            if(isalnum(ch)) postfix[L++]=ch;
            else
                if( ch == ')')
                {
                    while( stack[top] != '(')
                        postfix[L++]=pop();
                    elements=pop(); 
                }
                else
                {       
                    while( pr(stack[top]) >= pr(ch) )
                        postfix[L++]=pop();
                    push(ch);
                }
    }
    while( stack[top] != '#')     
        postfix[L++]=pop();
    postfix[L]='\0';          
    printf("\nPostfix Expression =  %s\n",postfix);
}


Output:
Enter the Infix expression of your choice:4^3+9*8/4+5
postfix expression:43^98*4/+5+


3.Write a c programme to implement Queue using two stacks.

/*program to implement queues using two stacks */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
void push(struct node** top, int data);
int pop(struct node** top);
struct queue
{
    struct node *stack1;
    struct node *stack2;
};
void enqueue(struct queue *H, int Y)
{
    push(&H->stack1, Y);
}
void dequeue(struct queue *H)
{
    int Y;
    if (H->stack1 == NULL && H->stack2 == NULL) {
        printf("The elements in queue is empty");
        return;
    }
    if (H->stack2 == NULL) {
        while (H->stack1 != NULL) {
        Y = pop(&H->stack1);
        push(&H->stack2, Y);
        }
    }
    Y = pop(&H->stack2);
    printf("%d\n", Y);
}
void push(struct node** top, int data)
{
    struct node* newnode = (struct node*) malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Stack overflow \n");
            return;
        }
    newnode->data = data;
    newnode->next = (*top);
    (*top) = newnode;
}
int pop(struct node** top)
{
    int cake;
    struct node *M;
    if (*top == NULL) {
        printf("Stack underflow \n");
        return 0;
    }
    else {
        M = *top;
        cake = M->data;
        *top = M->next;
        free(M);
        return cake;
    }
}
void display(struct node *top1,struct node *top2)
{
    while (top1 != NULL) {
        printf("%d\n", top1->data);
        top1 = top1->next;
    }
    while (top2 != NULL) {
        printf("%d\n", top2->data);
        top2 = top2->next;
    }
}
int main()
{
    struct queue *H = (struct queue*)malloc(sizeof(struct queue));
    int f = 0, B;
    char ch = 'A';
    H->stack1 = NULL;
    H->stack2 = NULL;
    while (ch == 'A'||ch == 'A') {
        printf("enter any element of your choice\n1. Enter any element to add queue\n2.Enter a Element to remove from queue\n3.display the element\n4.exit\n");
        scanf("%d", &f);
        switch(f) {
            case 1 : printf("enter the element to be added to queue\n");
                     scanf("%d", &B);
                     enqueue(H, B);
                     break;
            case 2 :printf("Element  removed  from queue\n "); 
                    dequeue(H);
                     break;
            case 3 :printf("elements\n"); 
                    display(H->stack1, H->stack2);
                     break;
            case 4 :printf("exit\n"); 
                    exit(1);
                     break;
            default : printf("invalid number\n");
                      break;
        }
    }
}



Output:
Enter your choice
1.Enter any element to add to queue
2.Enter a element to remove from queue
3. Display the elements 
4. Exit
1
Enter the element to be added to queue
11
Enter your choice
1.Enter any element to add to queue
2.Enter a element to remove from queue
3. Display the elements 
4. Exit
1
Enter the element to be added to queue
22
Enter your choice
1.Enter any element to add to queue
2.Enter a element to remove from queue
3. Display the elements 
4. Exit
1
Enter the element to be added to queue
33
Enter your choice
1.Enter any element to add to queue
2.Enter a element to remove from queue
3. Display the elements 
4. Exit
1
Enter the element to be added to queue
44
Enter your choice
1.Enter any element to add to queue
2.Enter a element to remove from queue
3. Display the elements 
4. Exit
2
Element removed from queue
11
Enter your choice
1.Enter any element to add to queue
2.Enter a element to remove from queue
3. Display the elements 
4. Exit
3
Elements are:
22
33
44
Enter your choice
1. Add an element to the queue
2. Remove a element from queue
3. Display the elements in queue
4. Exit
4
Exit

4. Write a c programme for insertion  and deletion of binary search tree.

#include <stdio.h>  
#include <stdlib.h>  
#include <stdbool.h>  
   
struct node{  
    int data;  
    struct node *left;  
    struct node *right;  
};  
   
struct node *root= NULL;  
   
struct node* createNode(int data){  

    struct node *newNode = (struct node*)malloc(sizeof(struct node));  
 
    newNode->data= data;  
    newNode->left = NULL;  
    newNode->right = NULL;  
      
    return newNode;  
}  
   
void insert(int data) {  
    
    struct node *newNode = createNode(data);  
      
    if(root == NULL){  
        root = newNode;  
        return;  
      }  
    else {  
         
        struct node *current = root, *parent = NULL;  
          
        while(true) {  
            
            parent = current;  
   
            if(data < current->data) {  
                current = current->left;  
                if(current == NULL) {  
                    parent->left = newNode;  
                    return;  
                }  
            }  
              
            else {  
                current = current->right;  
                if(current == NULL) {  
                    parent->right = newNode;  
                    return;  
                }  
            }  
        }  
    }  
}  
   
struct node* minNode(struct node *root) {  
    if (root->left != NULL)  
        return minNode(root->left);  
    else   
        return root;  
}   
   
struct node* deleteNode(struct node *node, int value) 
{  
    if(node == NULL){  
          return NULL;  
     }  
    else {  
        
        if(value < node->data)
        {
            node->left = deleteNode(node->left, value);  
        } 
        else if(value > node->data)
        {
            node->right = deleteNode(node->right, value);  
        } 
        else if(node->left == NULL && node->right == NULL)
        {
                node = NULL;  
         }
           
        else if(node->left == NULL)
        { 
                node = node->right;  
            }  
              
        else if(node->right == NULL)
        {  
                node = node->left;  
            }  
            
        else {  
                
                struct node *temp = minNode(node->right);  
                node->data = temp->data;  
                node->right = deleteNode(node->right, temp->data);  
            }  
        }  
return node;  
    }  
  
   
void inorderTraversal(struct node *node) {  
        
    if(root == NULL){  
        printf("Tree is empty\n");  
          return;  
     }  
    else {  
            
        if(node->left!= NULL)  
            inorderTraversal(node->left);  
        printf("%d ", node->data);  
        if(node->right!= NULL)  
          inorderTraversal(node->right);  
            
    }        
}  
        
int main()  
{  
    
    insert(40);  
    insert(20);  
    insert(80);  
    insert(60);  
    insert(100);  
    insert(910);  
      
    printf("Binary search tree after insertion: \n");  
    inorderTraversal(root);  
      
    struct node *deletedNode = NULL;  
    deletedNode = deleteNode(root, 910);  
    printf("\nBinary search tree after deleting node 910: \n");  
    inorderTraversal(root);  
      
    deletedNode = deleteNode(root, 20);  
    printf("\nBinary search tree after deleting node 20: \n");  
    inorderTraversal(root);  
      
    deletedNode = deleteNode(root, 40);  
    printf("\nBinary search tree after deleting node 40: \n");  
    inorderTraversal(root);  
   
    return 0;  
}
Output:
Binary search tree after insertion:
20 40 60 80 100 910
Binary search tree after deleting node 910:
20 40 60 80 100
Binary search tree after deleting node 20:
40 60 80 100
Binary search tree after deleting node 40:
60 80 100
